name: Build new
on:
  workflow_dispatch:
  push:
    paths-ignore:
      - "docs/**"
      - "README.md"
      - ".github/ISSUE_TEMPLATE/**"
    tags:
      - "v*"
permissions: write-all      
concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true
  
jobs:
  Build:
    permissions: write-all
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: "ubuntu-latest", target: "android-arm64"}
          - { os: "ubuntu-latest", target: "android-amd64"}
          - { os: "ubuntu-latest", target: "android-arm"}
          - { os: "ubuntu-latest", target: "linux-386"}
          - { os: "ubuntu-latest", target: "linux-amd64"}
          - { os: "ubuntu-latest", target: "windows-386"}
          - { os: "ubuntu-latest", target: "windows-amd64"}
          

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Set variables
        run: echo "VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        shell: bash


      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"
          check-latest: true

      - name: Set up MinGW
        if: startsWith(matrix.job.target,'windows')
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: x64

      - name: Set up GCC
        if: startsWith(matrix.job.target,'linux')
        uses: egor-tensin/setup-gcc@v1
        with:
          version: latest
          platform: x64
      - uses: nttld/setup-ndk@v1
        if: startsWith(matrix.job.target,'android')
        id: setup-ndk
        with:
          ndk-version: r25b
          add-to-path: false
          local-cache: true
      
 
          
      - name: Build 
        run: make -j$(($(nproc) + 1)) ${{ matrix.job.target }}
        
      - name: zip
        run: |
            gzip -r -S ".gz" ./bin/hiddify-clashlib*


      - name: Save version
        run: echo ${VERSION} > bin/version.txt
        shell: bash

      - uses: actions/upload-artifact@v3
        if: ${{  success() }}
        with:
          name: artifact
          path: bin/



      
      
      
  Upload-Prerelease:
    permissions: write-all
    if: ${{ github.ref_type=='branch' }}
    needs: [Build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: bin/

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: bin

      - name: Delete current release assets
        uses: 8Mi-Tech/delete-release-assets-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: Prerelease-${{ github.ref_name }}
          deleteOnlyFromDrafts: false

      - name: Tag Repo
        uses: richardsimko/update-tag@v1.0.6
        with:
          tag_name: Prerelease-${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - run: |
          cat > release.txt << 'EOF'
          Release created 
          Synchronize ${{ github.ref_name }} branch code updates, keeping only the latest version
          EOF

      - name: Upload Prerelease
        uses: softprops/action-gh-release@v1
        if: ${{  success() }}
        with:
          tag_name: Prerelease-${{ github.ref_name }}
          files: |
            bin/*
          prerelease: true
          generate_release_notes: true
          body_path: release.txt

  Upload-Release:
    permissions: write-all
    if: ${{ github.ref_type=='tag' }}
    needs: [Build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get tags
        run: |
          echo "CURRENTVERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          git fetch --tags
          echo "PREVERSION=$(git describe --tags --abbrev=0 HEAD^)" >> $GITHUB_ENV

      # - name: Generate release notes
      #   run: |
      #     cp ./.github/genReleaseNote.sh ./
      #     bash ./genReleaseNote.sh -v ${PREVERSION}...${CURRENTVERSION}
      #     rm ./genReleaseNote.sh

      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: bin/

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: bin

      - name: Upload Release
        uses: softprops/action-gh-release@v1
        if: ${{  success() }}
        with:
          tag_name: ${{ github.ref_name }}
          files: bin/*
          generate_release_notes: true
          # body_path: release.md
